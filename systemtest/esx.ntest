# -*-Perl-*-

###############################
# esx.ntest
#
# Exercise basic components of EC-ESX plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved
###############################

use strict;
use warnings;
use ECTest;

initCommander();

$::gPlugin_name   = $::ENV{PLUGIN_NAME};
$::gPlugin_key    = $::gPlugin_name;
$::gPlugin_key    =~ s/-[^-]+$//;
$::gPlugin_driver = $::gPlugin_key;
$::gPlugin_driver =~ s/-/::/g;

# win/lin matches the chronic3 procedure platform property
$::gPlatform       = "lin";
if ($^O eq "MSWin32") {
    $::gPlatform = "win";
}

# from initCommander
$::N = $adminSession;
my $xpath = $::N->getPlugin($::gPlugin_key);
$::gPlugin_name = $xpath->findvalue('//pluginName')->value;
$::gPlugin_ver = $xpath->findvalue('//pluginVersion')->value;
$::gCreatePrivateDirs = 1;

# triggers fake data
$::gRunTestUseFakeOutput = 1;

################################
# check-components-present - Check that the plugin contains required components
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "check-components-present", {}, sub {
    my $xpath;
    $xpath = $::N->getSteps("$::gPlugin_name","CreateConfiguration");
    assertOK($xpath,"CreateConfiguration");
    assertEq("CreateConfiguration", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateConfiguration");
    assertEq("CreateAndAttachCredential", $xpath->findvalue("//step[2]/stepName"), "step 2 is CreateAndAttachCredential");

    $xpath = $::N->getSteps("$::gPlugin_name","DeleteConfiguration");
    assertOK($xpath,"DeleteConfiguration");
    assertEq("DeleteConfiguration", $xpath->findvalue("//step[1]/stepName"), "step 1 is DeleteConfiguration");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Create");
    assertOK($xpath,"Create");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Create");
    assertOK($xpath,"Create");
    assertEq("Create", $xpath->findvalue("//step[2]/stepName"), "step 2 is Create");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Clone");
    assertOK($xpath,"Clone");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Clone");
    assertOK($xpath,"Clone");
    assertEq("Clone", $xpath->findvalue("//step[2]/stepName"), "step 2 is Clone");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Relocate");
    assertOK($xpath,"Relocate");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Relocate");
    assertOK($xpath,"Relocate");
    assertEq("Relocate", $xpath->findvalue("//step[2]/stepName"), "step 2 is Relocate");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Cleanup");
    assertOK($xpath,"Cleanup");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Cleanup");
    assertOK($xpath,"Cleanup");
    assertEq("Cleanup", $xpath->findvalue("//step[2]/stepName"), "step 2 is Cleanup");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Revert");
    assertOK($xpath,"Revert");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Revert");
    assertOK($xpath,"Revert");
    assertEq("Revert", $xpath->findvalue("//step[2]/stepName"), "step 2 is Revert");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Snapshot");
    assertOK($xpath,"Snapshot");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Snapshot");
    assertOK($xpath,"Snapshot");
    assertEq("Snapshot", $xpath->findvalue("//step[2]/stepName"), "step 2 is Snapshot");
    
    $xpath = $::N->getSteps("$::gPlugin_name","PowerOn");
    assertOK($xpath,"PowerOn");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","PowerOn");
    assertOK($xpath,"PowerOn");
    assertEq("PowerOn", $xpath->findvalue("//step[2]/stepName"), "step 2 is PowerOn");
    
    $xpath = $::N->getSteps("$::gPlugin_name","PowerOff");
    assertOK($xpath,"PowerOff");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","PowerOff");
    assertOK($xpath,"PowerOff");
    assertEq("PowerOff", $xpath->findvalue("//step[2]/stepName"), "step 2 is PowerOff");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Shutdown");
    assertOK($xpath,"Shutdown");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Shutdown");
    assertOK($xpath,"Shutdown");
    assertEq("Shutdown", $xpath->findvalue("//step[2]/stepName"), "step 2 is Shutdown");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Suspend");
    assertOK($xpath,"Suspend");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Suspend");
    assertOK($xpath,"Suspend");
    assertEq("Suspend", $xpath->findvalue("//step[2]/stepName"), "step 2 is Suspend");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CreateResourceFromVM");
    assertOK($xpath,"CreateResourceFromVM");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","CreateResourceFromVM");
    assertOK($xpath,"CreateResourceFromVM");
    assertEq("CreateResourceFromVM", $xpath->findvalue("//step[2]/stepName"), "step 2 is CreateResourceFromVM");
    
    $xpath = $::N->getSteps("$::gPlugin_name","GetVMConfiguration");
    assertOK($xpath,"GetVMConfiguration");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","GetVMConfiguration");
    assertOK($xpath,"GetVMConfiguration");
    assertEq("GetVMConfiguration", $xpath->findvalue("//step[2]/stepName"), "step 2 is GetVMConfiguration");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Import");
    assertOK($xpath,"Import");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Import");
    assertOK($xpath,"Import");
    assertEq("Import", $xpath->findvalue("//step[2]/stepName"), "step 2 is Import");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Export");
    assertOK($xpath,"Export");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","Export");
    assertOK($xpath,"Export");
    assertEq("Export", $xpath->findvalue("//step[2]/stepName"), "step 2 is Export");

    $xpath = $::N->getSteps("$::gPlugin_name","RegisterVM");
    assertOK($xpath,"RegisterVM");
    assertEq("SetTimelimit", $xpath->findvalue("//step[1]/stepName"), "step 1 is SetTimelimit");
    
    $xpath = $::N->getSteps("$::gPlugin_name","RegisterVM");
    assertOK($xpath,"RegisterVM");
    assertEq("RegisterVM", $xpath->findvalue("//step[2]/stepName"), "step 2 is RegisterVM");
};

################################
# Eval ESX Driver - Test loading ESX driver
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "Eval ESX Driver", {}, sub {
    use ElectricCommander::PropMod;

    # Load perl code from running Commander
    ElectricCommander::PropMod::loadPerlCodeFromProperty($::N,"/projects/$::gPlugin_name/esx_driver/ESX");
    my $gd = new ESX();
};

################################
# setup-create configuration - Test creating a configuration
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "test" }, 
            { actualParameterName => 'esx_url', value => "https://localhost" }, 
            { actualParameterName => 'credential', value => "test" }, 
          ],
          credential => [ 
            { credentialName => 'test', userName => "qa", password => "qa", },
          ],
        });

    assertOK($xpath, "run create configuration procedure");
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertDef($xpath, "runProcedure finished without a timeout");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::gPlugin_name/esx_cfgs/test/esx_url");
    assertEq("https://localhost",$xpath->findvalue("//value")->string_value,"seerver url");
    $xpath = $::N->getCredential("$::gPlugin_name","test");
    assertEq("qa",$xpath->findvalue("//userName")->string_value, 'Credential user');
};

################################
# create vm - Create virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "create vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_vmhost} = "test_host";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->create();
    
    my $expectedOutput = "";
    $expectedOutput .= "Creating virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully created virtual machine: 'test_vm' under host test_host";
    $expectedOutput .= "\n";
    $expectedOutput .= "Powering on virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully powered on virtual machine: 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# clone vm - Clone virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "clone vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_vmname_destination} = "test_vm_destination";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->clone();
    
    my $expectedOutput = "";
    $expectedOutput .= "Cloning virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Clone 'test_vm_destination' of virtual machine 'test_vm' successfully created";
    assertEq($expectedOutput, $out, "output");
};

################################
# relocate vm - Relocate virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "relocate vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->relocate();
    
    my $expectedOutput = "";
    $expectedOutput .= "Relocating virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'test_vm' successfully relocated";
    assertEq($expectedOutput, $out, "output");
};

################################
# cleanup vm - Cleanup virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "cleanup vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->cleanup();
    
    my $expectedOutput = "";
    $expectedOutput .= "Powering off virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully powered off virtual machine: 'test_vm'";
    $expectedOutput .= "\n";
    $expectedOutput .= "Destroying virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'test_vm' successfully destroyed";
    assertEq($expectedOutput, $out, "output");
};

################################
# revert vm - Revert virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "revert vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_vmhost} = "test_host";
    $opts->{esx_snapshotname} = "snapshot1";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->revert();
    
    my $expectedOutput = "";
    $expectedOutput .= "Reverting virtual machine 'test_vm' to snapshot snapshot1...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Revert to snapshot snapshot1 for virtual machine 'test_vm' completed successfully under host test_host";
    $expectedOutput .= "\n";
    $expectedOutput .= "Powering on virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully powered on virtual machine: 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# snapshot vm - Create a snapshot of a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "snapshot vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_vmhost} = "test_host";
    $opts->{esx_snapshotname} = "snapshot1";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->snapshot();
    
    my $expectedOutput = "";
    $expectedOutput .= "Creating snapshot snapshot1 for virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Snapshot snapshot1 completed for virtual machine 'test_vm' under host test_host";
    assertEq($expectedOutput, $out, "output");
};

################################
# poweron vm - Power on a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "poweron vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->poweron();
    
    my $expectedOutput = "";
    $expectedOutput .= "Powering on virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully powered on virtual machine 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# poweroff vm - Power off a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "poweroff vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->poweroff();
    
    my $expectedOutput = "";
    $expectedOutput .= "Powering off virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully powered off virtual machine 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# shutdown vm - Shut down a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "shutdown vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->shutdown();
    
    my $expectedOutput = "";
    $expectedOutput .= "Shutting down virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully shut down virtual machine 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# suspend vm - Suspend a virtual machine
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "suspend vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->suspend();
    
    my $expectedOutput = "";
    $expectedOutput .= "Suspending virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Successfully suspended virtual machine 'test_vm'";
    assertEq($expectedOutput, $out, "output");
};

################################
# create resource from vm - Create a EC resource from a VM
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "create resource from vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->createresourcefromvm();
    
    my $expectedOutput = "";
    $expectedOutput .= "Creating resource for virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Resource created";
    $expectedOutput .= "\n";
    $expectedOutput .= "Waiting for ping response #(300) of resource test_vm";
    $expectedOutput .= "\n";
    $expectedOutput .= "Ping response succesfully received";
    assertEq($expectedOutput, $out, "output");
};

################################
# get vm configuration - Get a VM configuration and store it in EC properties
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "get vm configuration", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_ipaddress} = "10.0.0.1";
    $opts->{esx_hostname} = "test_machine";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->getvmconfiguration();
    
    my $expectedOutput = "";
    $expectedOutput .= "Getting information of virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Storing properties...";
    $expectedOutput .= "\n";
    $expectedOutput .= "IP address: 10.0.0.1";
    $expectedOutput .= "\n";
    $expectedOutput .= "Hostname: test_machine";
    assertEq($expectedOutput, $out, "output");
};

################################
# import vm - Import a OVF package to ESX server
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "import vm", {}, sub {
    my $opts;
    $opts->{esx_user} = "user";
    $opts->{esx_pass} = "pass";
    $opts->{esx_host} = "host";
    $opts->{esx_ovf_file} = "c:/test.ovf";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->import();
    
    my $expectedOutput = "";
    $expectedOutput .= "Importing OVF package...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Opening OVF source: c:/test.ovf";
    $expectedOutput .= 'Opening VI target: vi://user:pass@host/';
    $expectedOutput .= 'Deploying to VI: vi://user@host/';
    $expectedOutput .= "Disk progress: 0%\nDisk progress: 1%\nDisk progress: 96%\nDisk progress: 97%\nDisk progress: 99%\nDisk Transfer Completed";
    $expectedOutput .= "\n";
    $expectedOutput .= "Completed successfully";
    assertEq($expectedOutput, $out, "output");
};

################################
# export vm - Export a VM to a OVF package
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "export vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_user} = "user";
    $opts->{esx_host} = "host";
    $opts->{esx_datacenter} = "ha-datacenter";
    $opts->{esx_target_directory} = "c:/test";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->export();
    
    my $expectedOutput = "";
    $expectedOutput .= "Exporting virtual machine...";
    $expectedOutput .= "\n";
    $expectedOutput .= 'Opening VI source: vi://user@host/ha-datacenter';
    $expectedOutput .= "Opening OVF target: c:/test";
    $expectedOutput .= "Writing OVF package: c:/test/test_vm/test_vm.ovf";
    $expectedOutput .= "Disk progress: 0%\nDisk Transfer Completed"; 
    $expectedOutput .= "\n";
    $expectedOutput .= "Completed successfully";
    assertEq($expectedOutput, $out, "output");
};

################################
# register vm - Register a vm to the ESX server
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "register vm", {}, sub {
    my $opts;
    $opts->{esx_vmname} = "test_vm";
    $opts->{esx_host} = "test_host";
    
    my $ec;
    my $gd = new ESX($ec, $opts);
    my $out = $gd->register();
    
    my $expectedOutput = "";
    $expectedOutput .= "Registering virtual machine 'test_vm'...";
    $expectedOutput .= "\n";
    $expectedOutput .= "Virtual machine 'test_vm' successfully registered under host test_host";
    assertEq($expectedOutput, $out, "output");
};

